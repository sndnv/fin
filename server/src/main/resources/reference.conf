fin {
  server {
    service {
      api {
        interface = "localhost"
        interface = ${?FIN_SERVER_SERVICE_API_INTERFACE}
        port = 9090
        port = ${?FIN_SERVER_SERVICE_API_PORT}

        context {
          enabled = true
          enabled = ${?FIN_SERVER_SERVICE_API_CONTEXT_ENABLED}
          type = "server"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?FIN_SERVER_SERVICE_API_CONTEXT_PROTOCOL}

          keystore {
            path = ""
            path = ${?FIN_SERVER_SERVICE_API_CONTEXT_KEYSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?FIN_SERVER_SERVICE_API_CONTEXT_KEYSTORE_TYPE}
            password = ""
            password = ${?FIN_SERVER_SERVICE_API_CONTEXT_KEYSTORE_PASSWORD}
          }
        }

        endpoint {
          manage {
            ui {
              authorization-endpoint = "https://localhost:8080/login/authorize"
              authorization-endpoint = ${?FIN_SERVER_UI_AUTHORIZATION_ENDPOINT}

              token-endpoint = "https://localhost:10000/oauth/token"
              token-endpoint = ${?FIN_SERVER_UI_TOKEN_ENDPOINT}

              authentication = {
                client-id = ""
                client-id = ${?FIN_SERVER_UI_AUTHENTICATION_CLIENT_ID}
                redirect-uri = "https://localhost:9090/manage/login/callback"
                redirect-uri = ${?FIN_SERVER_UI_AUTHENTICATION_REDIRECT_UI}
                scope = "fin-server"
                scope = ${?FIN_SERVER_UI_AUTHENTICATION_SCOPE}
                state-size = 64
                state-size = ${?FIN_SERVER_UI_AUTHENTICATION_STATE_SIZE}
                code-verifier-size = 64
                code-verifier-size = ${?FIN_SERVER_UI_AUTHENTICATION_CODE_VERIFIER_SIZE}
              }

              cookies {
                authentication-token = "fin-server-ui-authentication-token"
                authentication-token = ${?FIN_SERVER_UI_COOKIES_AUTHENTICATION_TOKEN}
                code-verifier = "fin-server-ui-code-verifier"
                code-verifier = ${?FIN_SERVER_UI_COOKIES_CODE_VERIFIER}
                state = "fin-server-ui-state"
                state = ${?FIN_SERVER_UI_COOKIES_STATE}
                secure = true
                secure = ${?FIN_SERVER_UI_COOKIES_SECURE}
                expiration-tolerance = 15 // in seconds
                expiration-tolerance = ${?FIN_SERVER_UI_COOKIES_EXPIRATION_TOLERANCE}
              }
            }
          }
        }
      }

      telemetry {
        metrics {
          interface = "localhost"
          interface = ${?FIN_SERVER_SERVICE_TELEMETRY_METRICS_INTERFACE}
          port = 9092
          port = ${?FIN_SERVER_SERVICE_TELEMETRY_METRICS_PORT}

          context { // not supported by exporter
            enabled = false
            type = "server"
            protocol = "TLS"

            keystore {
              path = ""
              type = "PKCS12"
              password = ""
            }
          }
        }
      }

      mode = "production"
      mode = ${?FIN_SERVER_SERVICE_MODE}

      development {
        resources-path = "static"
        resources-path = ${?FIN_SERVER_SERVICE_DEVELOPMENT_RESOURCES_PATH}
      }
    }

    clients {
      authentication {
        context {
          enabled = false
          enabled = ${?FIN_SERVER_CLIENTS_AUTHENTICATION_CONTEXT_ENABLED}
          type = "client"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]
          protocol = ${?FIN_SERVER_CLIENTS_AUTHENTICATION_CONTEXT_PROTOCOL}

          truststore {
            path = ""
            path = ${?FIN_SERVER_CLIENTS_AUTHENTICATION_CONTEXT_TRUSTSTORE_PATH}
            type = "PKCS12" # one of [PKCS12, JKS]
            type = ${?FIN_SERVER_CLIENTS_AUTHENTICATION_CONTEXT_TRUSTSTORE_TYPE}
            password = ""
            password = ${?FIN_SERVER_CLIENTS_AUTHENTICATION_CONTEXT_TRUSTSTORE_PASSWORD}
          }
        }
      }
    }

    authenticators {
      users {
        issuer = "fin-identity" # identity provider / service issuing JWTs
        issuer = ${?FIN_SERVER_AUTHENTICATORS_USERS_ISSUER}
        audience = "fin-server" # server (this service)
        audience = ${?FIN_SERVER_AUTHENTICATORS_USERS_AUDIENCE}
        identity-claim = "sub"
        identity-claim = ${?FIN_SERVER_AUTHENTICATORS_USERS_IDENTITY_CLAIM}
        jwks-endpoint = "https://localhost:9090/jwks/jwks.json"
        jwks-endpoint = ${?FIN_SERVER_AUTHENTICATORS_USERS_JWKS_ENDPOINT}
        refresh-interval = 90 minutes
        refresh-interval = ${?FIN_SERVER_AUTHENTICATORS_USERS_REFRESH_INTERVAL}
        refresh-retry-interval = 3 seconds
        refresh-retry-interval = ${?FIN_SERVER_AUTHENTICATORS_USERS_REFRESH_RETRY_INTERVAL}
        expiration-tolerance = 30 seconds
        expiration-tolerance = ${?FIN_SERVER_AUTHENTICATORS_USERS_TOLERANCE}
      }
    }

    persistence {
      database {
        profile = "H2Profile"
        profile = ${?FIN_SERVER_PERSISTENCE_DATABASE_PROFILE}
        url = "jdbc:h2:mem:server"
        url = ${?FIN_SERVER_PERSISTENCE_DATABASE_URL}
        driver = "org.h2.Driver"
        driver = ${?FIN_SERVER_PERSISTENCE_DATABASE_DRIVER}
        user = ""
        user = ${?FIN_SERVER_PERSISTENCE_DATABASE_USER}
        password = ""
        password = ${?FIN_SERVER_PERSISTENCE_DATABASE_PASSWORD}
        keep-alive-connection = true
        keep-alive-connection = ${?FIN_SERVER_PERSISTENCE_DATABASE_KEEP_ALIVE_CONNECTION}
        init = false
        init = ${?FIN_SERVER_PERSISTENCE_DATABASE_INIT}
      }
    }
  }
}

pekko {
  loglevel = "DEBUG"
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"

  http {
    server {
      server-header = ""
      server-header = ${?PEKKO_HTTP_SERVER_HEADER}
    }

    cors {
      allowed-origins = "https://"${fin.server.service.api.interface}":"${fin.server.service.api.port}
      allowed-origins = ${?PEKKO_HTTP_CORS_ALLOWED_ORIGINS}

      allowed-methods = ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"]
    }
  }
}
