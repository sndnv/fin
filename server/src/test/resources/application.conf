fin {
  test {
    security {
      tls {
        context-server {
          type = "server"
          protocol = "TLS"

          keystore {
            path = "./server/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }

        context-server-jks {
          type = "server"
          protocol = "TLS"

          keystore {
            path = "./server/src/test/resources/certs/localhost.jks"
            type = "JKS"
            password = "changeit"
          }
        }

        context-client {
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./server/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }

        context-disabled {
          enabled = false
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./server/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }

        context-missing {
          type = "client"
          protocol = "TLS"

          truststore {
            path = "./server/src/test/resources/certs/missing.p12"
            type = "JKS"
            password = ""
          }
        }
      }
    }

    server {
      persistence.with-init {
        database {
          profile = "H2Profile"
          url = "jdbc:h2:mem:server"
          driver = "org.h2.Driver"
          user = ""
          password = ""
          keep-alive-connection = true
          init = true
        }
      }

      persistence.without-init {
        database {
          profile = "H2Profile"
          url = "jdbc:h2:mem:server"
          driver = "org.h2.Driver"
          user = ""
          password = ""
          keep-alive-connection = true
          init = false
        }
      }

      service {
        api {
          interface = "localhost"
          port = 29999

          context {
            enabled = true
            type = "server"
            protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]

            keystore {
              path = "./server/src/test/resources/certs/localhost.p12"
              type = "PKCS12"
              password = ""
            }
          }
        }

        telemetry {
          metrics {
            interface = "localhost"
            port = 39999

            context { // not supported by exporter
              enabled = false
              type = "server"
              protocol = "TLS"

              keystore {
                path = ""
                type = "PKCS12"
                password = ""
              }
            }
          }
        }
      }
    }
  }

  server {
    service {
      api {
        interface = "localhost"
        port = 29999

        context {
          enabled = true
          type = "server"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]

          keystore {
            path = "./server/src/test/resources/certs/localhost.p12"
            type = "PKCS12"
            password = ""
          }
        }
      }

      telemetry {
        metrics {
          interface = "localhost"
          port = 39999

          context { // not supported by exporter
            enabled = false
            type = "server"
            protocol = "TLS"

            keystore {
              path = ""
              type = "PKCS12"
              password = ""
            }
          }
        }
      }
    }

    clients {
      authentication {
        context {
          enabled = false
          type = "client"
          protocol = "TLS" # one of [TLS, TLSv1, TLSv1.1, TLSv1.2]

          truststore {
            path = ""
            type = "PKCS12" # one of [PKCS12, JKS]
            password = ""
          }
        }
      }
    }

    authenticators {
      users {
        issuer = "fin-identity" # identity provider / service issuing JWTs
        audience = "fin-server" # server (this service)
        identity-claim = "sub"
        jwks-endpoint = "http://localhost:19999/valid/jwks.json"
        refresh-interval = 90 minutes
        refresh-retry-interval = 3 seconds
        expiration-tolerance = 30 seconds
      }
    }

    persistence {
      database {
        profile = "H2Profile"
        url = "jdbc:h2:mem:server"
        driver = "org.h2.Driver"
        user = ""
        password = ""
        keep-alive-connection = true
        init = true
      }
    }
  }
}